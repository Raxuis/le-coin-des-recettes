generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String         @id @default(cuid())
  email           String         @unique
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  name            String
  image           String
  comments        Comments[]
  ratings         Ratings[]
  recipes         Recipes[]      @relation("CreatedRecipes")
  shoppingLists   ShoppingList[]
  favoriteRecipes Recipes[]      @relation("FavoriteRecipes")
}

model Recipes {
  id              String         @id @default(uuid())
  author          String?
  ingredients     String[]
  steps           String[]
  budget          String
  difficulty      String
  totalTime       Int
  creatorId       String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  cookingTime     Int
  preparationTime Int
  restingTime     Int
  title           String         @unique
  slug            String?        @unique
  people          Int?
  type            RecipeTypes
  specialEvent    SpecialEvents?
  description     String?
  comments        Comments[]
  ratings         Ratings[]
  creator         User?          @relation("CreatedRecipes", fields: [creatorId], references: [id])
  favoritedBy     User[]         @relation("FavoriteRecipes")
}

model Comments {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  recipeId  String
  recipe    Recipes  @relation(fields: [recipeId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Ratings {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  recipeId  String
  value     Int
  recipe    Recipes  @relation(fields: [recipeId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, recipeId])
}

model ShoppingList {
  id        String   @id @default(cuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  items     Items[]
  user      User     @relation(fields: [userId], references: [id])
}

model Items {
  id             String       @id @default(cuid())
  title          String
  isChecked      Boolean      @default(false)
  ShoppingListId String
  number         Int          @default(0)
  ShoppingList   ShoppingList @relation(fields: [ShoppingListId], references: [id], onDelete: Cascade)
}

enum RecipeTypes {
  PLAT
  DESSERT
}

enum SpecialEvents {
  HALLOWEEN
  NOEL
  ANNIVERSAIRE
  SOIREE_ENTRE_AMIS
  REPAS_ETUDIANT
  REPAS_FAMILLE
}
